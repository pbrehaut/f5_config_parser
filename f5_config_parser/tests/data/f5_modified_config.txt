# TMOS V17

ltm monitor http mon-http-basic {
    defaults-from http
    interval 60
    timeout 181
    send "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n"
    recv "200 OK"
}
ltm monitor http mon-http-custom {
    defaults-from http
    interval 15
    timeout 46
    send "GET /health HTTP/1.1\r\nHost: app.example.com\r\nUser-Agent: F5-Monitor\r\n\r\n"
    recv "healthy"
    recv-disable "maintenance"
}
ltm monitor https mon-https-basic {
    defaults-from https
    interval 30
    timeout 91
    send "GET /status HTTP/1.1\r\nHost: secure.example.com\r\n\r\n"
    recv "OK"
}
ltm monitor https mon-https-ssl-verify {
    defaults-from https
    interval 60
    timeout 181
    ssl-profile serverssl-basic
    send "GET /api/health HTTP/1.1\r\nHost: api.example.com\r\n\r\n"
    recv "\"status\":\"up\""
}
ltm monitor tcp mon-tcp-basic {
    defaults-from tcp
    interval 10
    timeout 31
}
ltm monitor tcp mon-tcp-custom {
    defaults-from tcp
    interval 5
    timeout 16
    send "PING"
    recv "PONG"
}
ltm monitor udp mon-udp-basic {
    defaults-from udp
    interval 10
    timeout 31
}
ltm monitor dns mon-dns-custom {
    defaults-from dns
    interval 20
    timeout 61
    qname "example.com"
    qtype a
    recv "192.168"
}
ltm monitor icmp mon-icmp-basic {
    defaults-from icmp
    interval 5
    timeout 16
}
ltm monitor external mon-external-script {
    defaults-from external
    interval 30
    timeout 91
    args "arg1 arg2"
    run "/usr/bin/custom-monitor.sh"
}
ltm monitor http mon-http-new {
    defaults-from http
    interval 45
    timeout 136
    send "GET /new-endpoint HTTP/1.1\r\nHost: new.example.com\r\n\r\n"
    recv "SUCCESS"
}
ltm profile http http-basic {
    defaults-from http
}
ltm profile http http-compression {
    defaults-from http
    compression gzip
    compress-prefer-gzip yes
    compress-min-size 2048
    compress-buffer-size 8192
}
ltm profile http http-xff-headers {
    defaults-from http
    insert-xforwarded-for enabled
    xff-alternative-names { "X-Real-IP" "X-Client-IP" "X-Forwarded-For" }
    accept-xff enabled
}
ltm profile http http-security {
    defaults-from http
    redirect-rewrite all
    security enabled
    fallback-host "error.example.com"
    fallback-status-codes { 404 500 502 503 }
}
ltm profile http http-oneconnect {
    defaults-from http
    oneconnect-transformations enabled
    response-headers-permitted { "Server" "Date" "Cache-Control" }
    request-chunking preserve
}
ltm profile http http-custom-headers {
    defaults-from http
    response-headers-permitted { "X-Custom-Header" "X-App-Version" "X-New-Header" }
    request-headers-allowed { "X-API-Key" "Authorization" }
    header-erase "Server"
    header-insert "X-Load-Balancer: F5-BIG-IP-Updated"
}
ltm profile client-ssl clientssl-basic {
    defaults-from clientssl
    ciphers "ECDHE+AES-GCM:ECDHE+AES:!aNULL:!MD5:!DSS"
    options { "no-sslv2" "no-sslv3" "no-tlsv1" }
}
ltm profile client-ssl clientssl-strict {
    defaults-from clientssl
    ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256"
    options { "no-sslv2" "no-sslv3" "no-tlsv1" "no-tlsv1.1" }
    secure-renegotiation require-strict
}
ltm profile client-ssl clientssl-sni {
    defaults-from clientssl
    sni-default yes
    sni-require yes
    server-name "*.example.com"
}
ltm profile server-ssl serverssl-basic {
    defaults-from serverssl
    server-name "backend.example.com"
}
ltm profile server-ssl serverssl-no-verify {
    defaults-from serverssl
    ssl-forward-proxy disabled
    ssl-forward-proxy-bypass disabled
    peer-cert-mode ignore
}
ltm profile server-ssl serverssl-verify {
    defaults-from serverssl
    ca-file ca-bundle.crt
    peer-cert-mode require
    server-name "secure-backend.example.com"
}
ltm profile tcp tcp-lan {
    defaults-from tcp-lan-optimized
}
ltm profile tcp tcp-wan {
    defaults-from tcp-wan-optimized
}
ltm profile tcp tcp-mobile {
    defaults-from tcp-mobile-optimized
}
ltm node node-web-01 {
    address 10.0.1.10
    monitor mon-icmp-basic
}
ltm node node-web-02 {
    address 10.0.1.11
    monitor mon-tcp-basic
}
ltm node node-web-03 {
    address 10.0.1.12
    monitor mon-http-basic
}
ltm node node-app-01 {
    address 10.0.2.10
    monitor mon-tcp-custom
    ratio 3
}
ltm node node-app-02 {
    address 10.0.2.11
    monitor mon-tcp-custom
    ratio 1
}
ltm node node-db-01 {
    address 10.0.3.10
    monitor mon-tcp-basic
    connection-limit 200
}
ltm node node-api-01 {
    address 10.0.4.10
    monitor mon-https-basic
    rate-limit 1000
}
ltm node node-api-02 {
    address 10.0.4.11
    monitor mon-https-basic
    rate-limit 1000
}
ltm node node-dns-01 {
    address 10.0.5.10
    monitor mon-icmp-basic
}
ltm node node-new-01 {
    address 10.0.7.10
    monitor mon-http-new
    ratio 2
}
ltm rule irule-redirect-https {
when HTTP_REQUEST {
    if { [HTTP::header exists "X-Forwarded-Proto"] } {
        if { [HTTP::header "X-Forwarded-Proto"] eq "http" } {
            HTTP::redirect "https://[HTTP::host][HTTP::uri]"
        }
    } elseif { [TCP::local_port] == 80 } {
        HTTP::redirect "https://[HTTP::host][HTTP::uri]"
    }
}
}
ltm rule irule-maintenance-page {
when HTTP_REQUEST {
    set maintenance_mode [class match [IP::client_addr] equals "maintenance_ips"]
    if { $maintenance_mode } {
        HTTP::respond 503 content {
            <html><body><h1>Service Temporarily Unavailable</h1>
            <p>The service is currently undergoing scheduled maintenance.</p></body></html>
        } "Content-Type" "text/html"
    }
}
}
ltm rule irule-custom-headers {
when HTTP_REQUEST {
    # Log client information
    log local0. "Client [IP::client_addr]:[TCP::client_port] requested [HTTP::method] [HTTP::uri]"

    # Add custom request headers
    HTTP::header insert "X-Client-IP" [IP::client_addr]
    HTTP::header insert "X-Request-ID" "[expr {int(rand()*1000000)}]-[clock clicks]"
    HTTP::header insert "X-Environment" "production"
}
when HTTP_RESPONSE {
    # Add security headers
    HTTP::header insert "X-Content-Type-Options" "nosniff"
    HTTP::header insert "X-Frame-Options" "DENY"
    HTTP::header insert "X-XSS-Protection" "1; mode=block"

    # Remove server header
    HTTP::header remove "Server"
}
}
ltm rule irule-load-balancing {
when HTTP_REQUEST {
    switch -glob [string tolower [HTTP::uri]] {
        "/api/*" {
            pool pool-api-multi-monitor
        }
        "/static/*" {
            pool pool-web-http
        }
        "/app/*" {
            pool pool-app-tcp
        }
        "/new/*" {
            pool pool-new-service
        }
        default {
            # Use default pool from virtual server
        }
    }
}
}
ltm pool pool-web-http {
    monitor mon-http-basic
    load-balancing-mode round-robin
    members {
        node-web-01:80 {
            address 10.0.1.10
        }
        node-web-02:80 {
            address 10.0.1.11
        }
        node-web-03:80 {
            address 10.0.1.12
        }
    }
}
ltm pool pool-web-https {
    monitor mon-https-basic
    load-balancing-mode least-connections-member
    members {
        10.0.1.20:443 {
            address 10.0.1.20
        }
        10.0.1.21:443 {
            address 10.0.1.21
        }
    }
}
ltm pool pool-app-tcp {
    monitor mon-tcp-custom
    load-balancing-mode fastest-response
    members {
        node-app-01:8080 {
            address 10.0.2.10
            priority-group 1
        }
        node-app-02:8080 {
            address 10.0.2.11
            priority-group 1
        }
        10.0.2.12:8080 {
            address 10.0.2.12
            priority-group 2
        }
    }
}
ltm pool pool-database {
    monitor mon-tcp-basic
    load-balancing-mode least-connections-node
    members {
        10.0.3.10:3306 {
            address 10.0.3.10
            ratio 2
        }
        10.0.3.11:3306 {
            address 10.0.3.11
            ratio 1
        }
    }
}
ltm pool pool-api-multi-monitor {
    monitor mon-https-ssl-verify and mon-tcp-basic
    load-balancing-mode weighted-least-connections-member
    members {
        node-api-01:443 {
            address 10.0.4.10
        }
        node-api-02:443 {
            address 10.0.4.11
        }
    }
}
ltm pool pool-dns {
    monitor mon-dns-custom
    load-balancing-mode round-robin
    members {
        10.0.5.10:53 {
            address 10.0.5.10
        }
        10.0.5.11:53 {
            address 10.0.5.11
        }
    }
}
ltm pool pool-new-service {
    monitor mon-http-new
    load-balancing-mode ratio-member
    members {
        node-new-01:80 {
            address 10.0.7.10
            ratio 1
        }
    }
}
ltm virtual vs-web-basic {
    destination 192.168.100.100:80
    ip-protocol tcp
    pool pool-web-http
    profiles {
        tcp-lan { }
        http-basic { }
    }
    source 0.0.0.0/0
}
ltm virtual vs-web-ssl {
    destination 192.168.100.101:443
    ip-protocol tcp
    pool pool-web-https
    profiles {
        tcp-wan { }
        clientssl-basic {
            context clientside
        }
        serverssl-basic {
            context serverside
        }
        http-compression { }
    }
    rules {
        irule-custom-headers
    }
    source 0.0.0.0/0
}
ltm virtual vs-multi-ssl {
    destination 192.168.100.102:443
    ip-protocol tcp
    pool pool-web-https
    profiles {
        tcp-lan { }
        clientssl-basic {
            context clientside
        }
        clientssl-sni {
            context clientside
        }
        clientssl-strict {
            context clientside
        }
        serverssl-verify {
            context serverside
        }
        http-xff-headers { }
    }
    source 0.0.0.0/0
}
ltm virtual vs-app-custom {
    destination 192.168.100.103:8443
    ip-protocol tcp
    pool pool-app-tcp
    profiles {
        tcp-mobile { }
        clientssl-basic {
            context clientside
        }
        serverssl-no-verify {
            context serverside
        }
        http-security { }
    }
    source 0.0.0.0/0
}
ltm virtual vs-api-gateway {
    destination 192.168.100.104:443
    ip-protocol tcp
    pool pool-api-multi-monitor
    profiles {
        tcp-wan { }
        clientssl-sni {
            context clientside
        }
        serverssl-verify {
            context serverside
        }
        http-oneconnect { }
        http-custom-headers { }
    }
    rules {
        irule-maintenance-page
        irule-load-balancing
    }
    source 0.0.0.0/0
}
ltm virtual vs-database {
    destination 192.168.100.105:3306
    ip-protocol tcp
    pool pool-database
    profiles {
        tcp-lan { }
    }
    source 0.0.0.0/0
}
ltm virtual vs-dns {
    destination 192.168.100.106:53
    ip-protocol udp
    pool pool-dns
    profiles {
        udp { }
    }
    source 0.0.0.0/0
}
ltm virtual vs-new-service {
    destination 192.168.100.107:80
    ip-protocol tcp
    pool pool-new-service
    profiles {
        tcp-lan { }
        http-basic { }
    }
    source 0.0.0.0/0
}